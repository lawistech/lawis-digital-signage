import{a as i}from"./chunk-WBRTOA2C.js";import{A as d,R as _,W as v,j as c,l,o as u}from"./chunk-URYE4ZYK.js";import{a as S,b as y,i as g}from"./chunk-ODN5LVDJ.js";var E=(()=>{class s{constructor(){this.table="screens"}getScreens(){return c(i.from(this.table).select(`
          *,
          areas (
            id,
            name,
            location,
            status
          )
        `).order("created_at",{ascending:!1})).pipe(u(e=>{if(e.error)throw e.error;return e.data}),d(e=>(console.error("Error fetching screens:",e),l(()=>e))))}verifyRegistrationCode(e){return c(i.from("pending_registrations").select("*").eq("registration_code",e).eq("is_claimed",!1).single()).pipe(u(r=>{if(r.error)throw r.error;return r.data}),d(r=>(console.error("Error verifying registration code:",r),l(()=>new Error("Invalid registration code or already claimed")))))}markRegistrationAsClaimed(e,r){return c(i.from("pending_registrations").update({is_claimed:!0,device_id:r,claimed_at:new Date().toISOString()}).eq("registration_code",e)).pipe(u(t=>{if(t.error)throw t.error;return!0}),d(t=>(console.error("Error marking registration as claimed:",t),l(()=>t))))}getScreensByArea(e){return c(i.from(this.table).select(`
          *,
          areas (
            id,
            name,
            location,
            status
          )
        `).eq("area_id",e).order("created_at",{ascending:!1})).pipe(u(r=>{if(r.error)throw r.error;return r.data}),d(r=>(console.error("Error fetching screens by area:",r),l(()=>r))))}getScreen(e){return c(i.from(this.table).select(`
          *,
          areas (
            id,
            name,
            location,
            status
          )
        `).eq("id",e).single()).pipe(u(r=>{if(r.error)throw r.error;return r.data}),d(r=>(console.error("Error fetching screen:",r),l(()=>r))))}createScreen(e,r){let t={name:e.name,channel_id:e.channel_id,channel_name:e.channel_name,area_id:e.area_id,status:e.status,resolution:e.resolution,orientation:e.orientation,last_ping:new Date().toISOString(),current_playlist:e.current_playlist||null,current_playlist_started_at:e.current_playlist?new Date().toISOString():null,next_playlist:e.next_playlist||null,schedule:e.schedule||null,hardware:e.hardware,network:e.network,location:e.location,settings:e.settings,analytics:e.analytics,maintenance:e.maintenance,tags:e.tags||[]};return console.log("Creating screen with data:",t),c(i.from(this.table).insert([t]).select().single()).pipe(u(a=>{if(a.error)throw console.error("Supabase error:",a.error),a.error;let o=a.data;return r&&this.markRegistrationAsClaimed(r,o.id).subscribe({next:()=>console.log("Registration marked as claimed"),error:h=>console.error("Error marking registration:",h)}),o}),d(a=>(console.error("Error creating screen:",a),l(()=>new Error("Failed to create screen: "+a.message)))))}updateScreen(e,r){return c(i.from(this.table).update(r).eq("id",e).select(`
          *,
          areas (
            id,
            name,
            location,
            status
          )
        `).single()).pipe(u(t=>{if(t.error)throw t.error;return t.data}),d(t=>(console.error("Error updating screen:",t),l(()=>t))))}deleteScreen(e){return c(i.from(this.table).delete().eq("id",e)).pipe(u(r=>{if(r.error)throw r.error}),d(r=>(console.error("Error deleting screen:",r),l(()=>r))))}subscribeToScreenUpdates(e){i.channel("screen_changes").on("postgres_changes",{event:"*",schema:"public",table:this.table},r=>{e(r.new)}).subscribe()}subscribeToPendingRegistrations(e){i.channel("pending_registrations_changes").on("postgres_changes",{event:"*",schema:"public",table:"pending_registrations"},r=>{e(r.new)}).subscribe()}updateCurrentPlaylistFromSchedule(e){return g(this,null,function*(){try{let{data:r,error:t}=yield i.from("screens").select("*").eq("id",e).single();if(t)throw t;if(!r.schedule?.upcoming)return;let a=new Date,o=a.toTimeString().split(":").slice(0,2).join(":"),h=a.toLocaleDateString("en-US",{weekday:"long"});console.log(`Current day: ${h}, current time: ${o}`);let p=[...r.schedule.upcoming].sort((n,m)=>n.priority!==m.priority?n.priority-m.priority:n.start_time.localeCompare(m.start_time)).find(n=>{let m=n.days_of_week?.includes(h),b=o>=n.start_time&&o<=n.end_time;return console.log(`Schedule ${n.playlist_id}: day valid=${m}, time valid=${b}`),m&&b});if(p&&p.playlist_id!==r.current_playlist){console.log(`Activating schedule for playlist ${p.playlist_id}`);let{error:n}=yield i.from("screens").update({current_playlist:p.playlist_id,current_playlist_started_at:new Date().toISOString()}).eq("id",e);if(n)throw n}else if(!p&&r.current_playlist){console.log("No active schedule found, clearing current playlist");let{error:n}=yield i.from("screens").update({current_playlist:null,current_playlist_started_at:null}).eq("id",e);if(n)throw n}let k=y(S({},r.schedule),{current:p||null}),{error:w}=yield i.from("screens").update({schedule:k}).eq("id",e);if(w)throw w}catch(r){throw console.error("Error updating current playlist:",r),r}})}startScheduleChecker(e){setInterval(()=>{this.updateCurrentPlaylistFromSchedule(e)},3e4)}addScheduleToScreen(e,r){return g(this,null,function*(){try{let{data:t,error:a}=yield i.from("screens").select("schedule").eq("id",e).single();if(a)throw a;let o=t.schedule||{current:null,upcoming:[]},h=y(S({},o),{upcoming:[...o.upcoming,{playlist_id:r.playlist_id,start_time:r.start_time,end_time:r.end_time,priority:r.priority}]}),{error:f}=yield i.from("screens").update({schedule:h}).eq("id",e);if(f)throw f}catch(t){throw console.error("Error adding schedule:",t),t}})}removeScheduleFromScreen(e,r){return g(this,null,function*(){try{let{data:t,error:a}=yield i.from("screens").select("schedule").eq("id",e).single();if(a)throw a;let o=t.schedule||{current:null,upcoming:[]},h=[...o.upcoming];h.splice(r,1);let f=y(S({},o),{upcoming:h}),{error:p}=yield i.from("screens").update({schedule:f}).eq("id",e);if(p)throw p}catch(t){throw console.error("Error removing schedule:",t),t}})}updateScreenSchedule(e,r){return g(this,null,function*(){try{let{error:t}=yield i.from("screens").update({schedule:r}).eq("id",e);if(t)throw t}catch(t){throw console.error("Error updating screen schedule:",t),t}})}getPendingRegistrations(){return c(i.from("pending_registrations").select("*").eq("is_claimed",!1).order("created_at",{ascending:!1})).pipe(u(e=>{if(e.error)throw e.error;return e.data}),d(e=>(console.error("Error fetching pending registrations:",e),l(()=>e))))}deletePendingRegistration(e){return c(i.from("pending_registrations").delete().eq("id",e)).pipe(u(r=>{if(r.error)throw r.error}),d(r=>(console.error("Error deleting pending registration:",r),l(()=>r))))}static{this.\u0275fac=function(r){return new(r||s)}}static{this.\u0275prov=_({token:s,factory:s.\u0275fac,providedIn:"root"})}}return s})();var P=(()=>{class s{constructor(e){this.supabaseService=e,this.scheduleCheckers=new Map}getScreens(){return this.supabaseService.getScreens()}getScreen(e){return this.supabaseService.getScreen(e)}createScreen(e){return this.supabaseService.createScreen(e)}updateScreen(e,r){return this.supabaseService.updateScreen(e,r)}deleteScreen(e){return this.supabaseService.deleteScreen(e)}updateCurrentPlaylistFromSchedule(e){return g(this,null,function*(){return this.supabaseService.updateCurrentPlaylistFromSchedule(e)})}startScheduleChecker(e){this.stopScheduleChecker(e),this.updateCurrentPlaylistFromSchedule(e);let r=setInterval(()=>{this.updateCurrentPlaylistFromSchedule(e)},3e4);this.scheduleCheckers.set(e,r)}stopScheduleChecker(e){let r=this.scheduleCheckers.get(e);r&&(clearInterval(r),this.scheduleCheckers.delete(e))}cleanupScheduleCheckers(){this.scheduleCheckers.forEach(e=>{clearInterval(e)}),this.scheduleCheckers.clear()}static{this.\u0275fac=function(r){return new(r||s)(v(E))}}static{this.\u0275prov=_({token:s,factory:s.\u0275fac,providedIn:"root"})}}return s})();export{E as a,P as b};
